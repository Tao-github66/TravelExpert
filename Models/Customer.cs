//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Workshop_5_Group_3.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Customer
    {
        public Customer()
        {
            this.Bookings = new HashSet<Booking>();
            this.CreditCards = new HashSet<CreditCard>();
            this.Customers_Rewards = new HashSet<Customers_Rewards>();
        }

        public int CustomerId { get; set; }

        [Display(Name = "First Name")]
        [Required(ErrorMessage = "First name is a required field", AllowEmptyStrings = false)]
        [StringLength(20)]
        public string CustFirstName { get; set; }

        [Display(Name = "Last Name")]
        [Required(ErrorMessage = "Last name is a required field", AllowEmptyStrings = false)]
        [StringLength(20)]
        public string CustLastName { get; set; }

        [Display(Name = "Address")]
        [Required(ErrorMessage = "Address is a required field", AllowEmptyStrings = false)]
        [StringLength(50)]
        public string CustAddress { get; set; }

        [Display(Name = "City")]
        [Required(ErrorMessage = "City is a required field", AllowEmptyStrings = false)]
        [StringLength(20)]
        public string CustCity { get; set; }

        [Display(Name = "Province")]
        [Required(ErrorMessage = "Province is a required field", AllowEmptyStrings = false)]
        [StringLength(20)]
        public string CustProv { get; set; }

        [Display(Name = "Postal Code")]
        [Required(ErrorMessage = "Postal code is a required field", AllowEmptyStrings = false)]
        [RegularExpression(@"^(?![DFIOQU])([ABCEGHJ-NPRSTVXYabceghj-nprstvxy]\d[A-Za-z][ ]\d[A-Za-z]\d)$", ErrorMessage = "Postal code format is X1X 1X1")]
        [StringLength(10)]
        public string CustPostal { get; set; }

        [Display(Name = "Country")]
        [Required(ErrorMessage = "Country is a required field", AllowEmptyStrings = false)]
        [StringLength(10)]
        public string CustCountry { get; set; }

        [Display(Name = "Home Phone #")]
        [Required(ErrorMessage = "Home phone is a required field", AllowEmptyStrings = false)]
        [StringLength(12)]
        [DataType(DataType.PhoneNumber)]
        [RegularExpression(@"\(?\d{3}\)?-? *\d{3}-? *-?\d{4}", ErrorMessage = "Input number in xxx-xxx-xxxx format")]
        public string CustHomePhone { get; set; }

        [Display(Name = "Business Phone #")]
        [StringLength(15)]
        [RegularExpression(@"\(?\d{3}\)?-? *\d{3}-? *-?\d{4}", ErrorMessage = "Input number in xxx-xxx-xxxx format")]
        [DataType(DataType.PhoneNumber)]
        public string CustBusPhone { get; set; }

        [Display(Name = "Email")]
        [Required(ErrorMessage = "Email is a required field", AllowEmptyStrings = false)]
        //[StringLength(30)]
        [RegularExpression(@"^([0-9a-zA-Z]([\+\-_\.][0-9a-zA-Z]+)*)+@(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]*\.)+[a-zA-Z0-9]{2,3})$",
        ErrorMessage = "Please provide valid email")]
        public string CustEmail { get; set; }

        public Nullable<int> AgentId { get; set; }

        [Display(Name = "Username")]
        [Required(ErrorMessage = "UserId is a required field", AllowEmptyStrings = false)]
        [StringLength(10)]
        public string UserId { get; set; }

        [Required(ErrorMessage = "Password is a required field", AllowEmptyStrings = false)]
        [DataType(DataType.Password)]
        [MinLength(7, ErrorMessage = "Minimum 7 characters required")]
        [StringLength(15)]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "Passwords do not match")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Password confirmation is required")]
        [StringLength(15)]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm Password")]
        public string ConfirmPassword { get; set; }

        public virtual Agent Agent { get; set; }
        public virtual ICollection<Booking> Bookings { get; set; }
        public virtual ICollection<CreditCard> CreditCards { get; set; }
        public virtual ICollection<Customers_Rewards> Customers_Rewards { get; set; }
    }
}
